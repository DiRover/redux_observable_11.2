{"version":3,"sources":["actions/actionTypes.jsx","actions/actionCreators.jsx","components/Blank.jsx","context/Context.tsx","components/Spinner.jsx","components/Modal.jsx","components/List.js","components/Description.jsx","components/UnionComponent.tsx","context/Provider.jsx","App.tsx","serviceWorker.js","reducers/showListReducer.js","store/store.js","epics/epics.js","index.tsx"],"names":["LOAD_SERVICES_LIST","LOAD_SUCCESS","LOAD_DESCRIPTION","LOAD_DESCRIPTION_SUCCESS","LOAD_FAIL","LOAD_DESCRIPTION_FAIL","CANCEL","loadServicesList","type","Container","styled","div","Blank","src","alt","to","className","Context","createContext","Spinner","role","Modal","prop","data","useContext","getDescription","getList","currentId","useSelector","state","list","dispatch","useDispatch","load","cancelHandler","style","display","top","data-bs-dismiss","aria-label","onClick","List","loading","error","map","item","id","name","Description","description","title","UnionComponent","useEffect","path","exact","component","Provider","value","payload","loadDescription","children","App","Fragment","Boolean","window","location","hostname","match","initialState","reducer","combineReducers","action","respons","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","epic","combineEpics","action$","pipe","ofType","switchMap","ajax","getJSON","process","loadSuccess","catchError","of","o","tap","console","log","epicMiddleware","createEpicMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.79d197bb.chunk.js","sourcesContent":["//типы экшенов\nexport const LOAD_SERVICES_LIST = 'LOAD_SERVICES_LIST';\nexport const LOAD_SUCCESS = 'LOAD_SUCCESS';\nexport const LOAD_DESCRIPTION = 'LOAD_DESCRIPTION';\nexport const LOAD_DESCRIPTION_SUCCESS = 'LOAD_DESCRIPTION_SUCCESS';\nexport const LOAD_FAIL = 'LOAD_FAIL';\nexport const LOAD_DESCRIPTION_FAIL = 'LOAD_DESCRIPTION_FAIL';\nexport const CANCEL = 'CANCEL';","import {\n  LOAD_SERVICES_LIST,\n  LOAD_SUCCESS,\n  LOAD_DESCRIPTION,\n  LOAD_DESCRIPTION_SUCCESS,\n  LOAD_FAIL,\n  LOAD_DESCRIPTION_FAIL,\n  CANCEL,\n} from './actionTypes';\n//создание экшенов\nexport const loadServicesList = () => {//начальная загрузка списка\n  return {\n    type: LOAD_SERVICES_LIST,\n  }\n}\n\nexport const loadSuccess = (respons) => {//удачная начальная загрузка списка\n  const list = respons;\n  return {\n    type: LOAD_SUCCESS,\n    payload: { list },\n    loading: false,\n  }\n}\n\nexport const loadFail = () => {//неудачная загрузка списка\n  return {\n    type: LOAD_FAIL,\n  }\n}\n\nexport const loadDescription = (id) => {//загрузка описания\n  return {\n    type: LOAD_DESCRIPTION,\n    payload: { id }\n  }\n}\n\nexport const loadDescriptionSuccess = (respons) => {//удачная загрузка описания\n  return {\n    type: LOAD_DESCRIPTION_SUCCESS,\n    payload: { respons }\n  }\n}\n\nexport const loadDescriptionFail = () => {//неудачная загрузка описания\n  return {\n    type: LOAD_DESCRIPTION_FAIL,\n  }\n}\n\nexport const cancel = () => {//просто отмена (когда появляется модалка с вопросом новой загрузки)\n  return {\n    type: CANCEL,\n  }\n}","import { Link } from 'react-router-dom';\n\nimport styled from 'styled-components'\n\nconst Container = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nwidth: 50%;\nmargin: 30vh auto;\n`;\n\n//бланковая страница, если кто-то выбрал отмену, а не дальнейшую загрузку\nexport default function Blank() {\n    return (\n        <Container>\n            <img src=\"https://insider.knplabs.com/wp-content/uploads/2015/09/CNFLc3IWEAAJgws-1.gif\" alt='monkey' />\n            <Link to='/'>\n                <button type=\"button\" className=\"btn btn-info btn-lg\">Home</button>\n            </Link>\n        </Container>\n    )\n}","import { createContext } from 'react';\n//создаём контекст для передачи всего (вообще всего) между компонентами\nconst Context = createContext([]);\nexport default Context;","//компонент спинер\nfunction Spinner() {\n    return (\n        <div className=\"d-flex justify-content-center\">\n            <div className=\"spinner-border text-primary\" role=\"status\">\n                <span className=\"visually-hidden\">Loading...</span>\n            </div>\n        </div>\n    )\n};\n\nexport default Spinner;","import { Fragment, useContext } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { cancel } from '../actions/actionCreators';\n\nimport Context from '../context/Context';\n\n//модальное окно\nexport default function Modal(prop) {\n    const {data} = prop;\n    const { getDescription, getList } = useContext(Context);\n    const { currentId } = useSelector(state => state.list);\n    const dispatch = useDispatch();\n\n    const load = data === 'list' ? false : true;//для определения того, что нужно загрузить список или описание\n\nconst cancelHandler = () => {//обработка отмены повторной загрузки чего либо\n     dispatch(cancel());\n}\nreturn (\n    <Fragment>\n        <div className=\"modal\" style={{display: \"block\", top: \"30vh\"}}>\n        <div className=\"modal-dialog\">\n        <div className=\"modal-content\">\n            <div className=\"modal-header\">\n                <h5 className=\"modal-title\">Loading is fail</h5>\n                <Link to='/blank'><button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\" onClick={cancelHandler}></button></ Link>\n            </div>\n            <div className=\"modal-body\">\n                <p>Do you want to load data again?</p>\n            </div>\n            <div className=\"modal-footer\">\n                <Link to='/blank'><button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\" onClick={cancelHandler}>Nooo, it's too bored</button></ Link>\n                <button type=\"button\" className=\"btn btn-primary\" onClick={() => load ? getDescription(currentId) : getList()}>Yes, I do</button>\n            </div>\n        </div>\n    </div>\n</div>\n    </Fragment>)\n}\n","import { Fragment, useContext } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Context from '../context/Context';\nimport Spinner from '../components/Spinner';\nimport Modal from './Modal';\n\nimport styled from 'styled-components'\n\nconst Container = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nwidth: 50%;\nmargin: 30vh auto;\n`;\n\n//компонент отображения списка элементов\nfunction List() {\n    const { list, loading, error } = useSelector(state => state.list);\n    const { getDescription } = useContext(Context);\n    const data = \"list\";// нужно для того, чтобы модалка поняла, что нужно загрузить заного именно список\n\n    return (\n        <Fragment>\n            <Container>\n                {loading && <Spinner />}\n                {error && <Modal data={data}/>}\n                {(!loading && !error) && <div className=\"list-group\">\n                    {list.map((item) => {\n                        return <Link to={`/list/${item.id}`} key={item.id} onClick={() => getDescription(item.id)} className=\"list-group-item list-group-item-action list-group-item-info\">{item.name}</Link>\n                    })}\n                </div>}\n            </Container>\n\n        </Fragment>\n\n    )\n};\n\nexport default List;\n\n","import { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport Spinner from '../components/Spinner';\nimport Modal from './Modal';\n\nconst Container = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nwidth: 50%;\nmargin: 30vh auto;\n`;\n//компонент отображения описания элемента списка\nexport default function Description() {\n    const { description, title, loading, error } = useSelector(state => state.list);\n\n    const data = \"description\";//нужно для того, чтобы модалка поняла, что нужно заного загрузить именно описания элемента списка\n    return (\n        <Fragment>\n            <Container>\n                {loading && <Spinner />}\n                {error && <Modal prop={data}/>}\n                {(!loading && !error) && <Fragment>\n                    <h1>{title}</h1>\n                    <p className=\"fw-bolder\">{description}</p>\n                    <div style={{\"margin\": \"40px 0 0 0\"}}>\n                    <Link to='/'><button type=\"button\" className=\"btn btn-info btn-lg\">Home</button></Link>\n                </div>\n                </Fragment>}\n            </Container>\n        </Fragment>\n    )\n}","import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { loadServicesList } from '../actions/actionCreators';\nimport { useDispatch } from 'react-redux';\nimport Blank from \"./Blank\";\nimport List from \"./List\";\nimport Description from \"./Description\";\nimport {useEffect} from 'react';\n//объединенный компонент с роутами\nfunction UnionComponent(): JSX.Element {\n    const dispatch = useDispatch();\n    useEffect(() => {//не помню почему юзэффект, но точно нужен, т.к. без него тоже пытался\n        dispatch(loadServicesList());//сразу загружаем список в самый первый раз\n    }, [dispatch])\n    \n\n    return (\n        <Router>\n            <main className=\"main-container\">\n                <Switch>\n                    <Route path=\"/list/:id\" exact component={Description} />\n                    <Route path=\"/blank\" exact component={Blank} />\n                    <Route path=\"/\" exact component={List} />\n                </Switch>\n            </main>\n        </Router>\n    )\n}\n\nexport default UnionComponent","import Context from \"./Context\";\nimport {loadDescription, loadServicesList} from \"../actions/actionCreators\";\nimport { useDispatch } from 'react-redux';\n\nexport default function Provider(prop) {\n    const dispatch = useDispatch();\n    const getDescription = (id) => {//получение описания\n        dispatch(loadDescription(id));\n    }\n\n    const getList = () => {//получение списка\n        dispatch(loadServicesList());\n    }\n\n    return(\n        <Context.Provider value={{getDescription, getList}}>\n            {prop.children}\n        </Context.Provider>\n    )\n}\n\n","import React from 'react';\nimport './App.css';\nimport UnionComponent from './components/UnionComponent';\nimport Provider from './context/Provider';\n\n\nfunction App() {\n    return (\n        <React.Fragment>\n            <Provider>\n                <UnionComponent />\n            </Provider>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { LOAD_SERVICES_LIST, LOAD_SUCCESS, LOAD_FAIL, LOAD_DESCRIPTION, LOAD_DESCRIPTION_SUCCESS, LOAD_DESCRIPTION_FAIL, CANCEL } from \"../actions/actionTypes\";\n\nconst initialState = {//начальное состояние\n    list: [],//список\n    loading: true,//происходит или нет загрузка\n    currentId: null,//айди элемента списка, нужно для загрузки описания\n    description: null,//описание элемента\n    title: null,//не помню для чего, не столь важно\n    error: false,//случилась или нет ошибка\n};\n\nexport default function showListReducer(state = initialState, action) {\n    switch (action.type) {\n        case LOAD_SERVICES_LIST://экшен загрузки списка\n            return {\n                ...state, loading: true, error: false,\n            }\n        case LOAD_SUCCESS://экшен удачной загрузки списка\n            const { list } = action.payload;\n            return {\n                ...state, list,\n                loading: false,\n            }\n        case LOAD_FAIL: //экшен неудачной загрузки списка\n            return { ...state, error: true, loading: false }\n        case LOAD_DESCRIPTION://экшен загрузки описания элемента списка\n            const { id } = action.payload;\n            return {\n                ...state, loading: true, currentId: id, error: false,\n            }\n        case LOAD_DESCRIPTION_SUCCESS://экшен удачной загрузки описания элемента списка\n            const { respons } = action.payload;\n            const description = respons.description;\n            const title = respons.title;\n            return {\n                ...state, loading: false, description: description, title: title\n            }\n        case LOAD_DESCRIPTION_FAIL://экшен неудачной загрузки описания элемента списка\n            return { ...state, error: true, loading: false }\n        case CANCEL:\n            return {\n                ...state, error: false, loading: false\n            }\n\n        default:\n            return state;\n    }\n}","import { createStore, combineReducers, applyMiddleware, compose, } from 'redux';\nimport { combineEpics, createEpicMiddleware } from 'redux-observable';\nimport showListReducer from '../reducers/showListReducer';\nimport { listEpic, descriptionEpic} from '../epics/epics';\n\nconst reducer = combineReducers({//собираем рэдьюсер\n  list: showListReducer\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst epic = combineEpics(//собираем эпик\n  listEpic,\n  descriptionEpic,\n);\n\nconst epicMiddleware = createEpicMiddleware();//посредник для обработки асинхронных запросов\n\nconst store = createStore(reducer, composeEnhancers( //создаем сторе\n  applyMiddleware(epicMiddleware)\n));\n\nepicMiddleware.run(epic);\n\nexport default store;\n","import { ofType } from 'redux-observable';\nimport { ajax } from 'rxjs/ajax';\nimport { map, tap, switchMap, catchError } from 'rxjs/operators';\nimport { LOAD_SERVICES_LIST, LOAD_DESCRIPTION } from '../actions/actionTypes';\nimport { loadSuccess, loadFail, loadDescriptionSuccess, loadDescriptionFail } from '../actions/actionCreators';\nimport { of } from 'rxjs';\n// эпик\nexport const listEpic = action$ => action$.pipe(\n    ofType(LOAD_SERVICES_LIST),//реагирем на загрузку списка\n    switchMap(() => ajax.getJSON(`${process.env.REACT_APP_SEARCH_URL}/services`).pipe(//отправляем запрос\n        map(respons => loadSuccess(respons)),//обработка удачного запроса\n        catchError(() => of(loadFail()))//ловим и обрабатываем ошибку\n    )),\n);\n\nexport const descriptionEpic = action$ => action$.pipe(\n    ofType(LOAD_DESCRIPTION),//реагирем на  загрузку описания\n    map(o => o.payload.id),//получам айди элемента, для которого нужно описание\n    tap(o => console.log(o)),//айди в консоль\n    //map(o => new URLSearchParams({ q: o })),//нафиг этот квери, потом на сервере сложнее айди вытащить\n    switchMap((id) => ajax.getJSON(`${process.env.REACT_APP_SEARCH_URL}/services/${id}`).pipe(//отправляем запрос\n        map(o => loadDescriptionSuccess(o)),//обработка удачного запроса\n        catchError(() => of(loadDescriptionFail()))//ловим и обрабатываем ошибку\n    )),\n\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}